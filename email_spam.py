# -*- coding: utf-8 -*-
"""Email spam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBnmvJBthnOWZaw6fNdiCBx7CFng2YVa

##***Email Spam Filtering***

###***Use a dataset of emails and build a model that can identify spam emails.***

####*Importing all libraries which was important for this task*
"""

# first we import all libraries which was important for this task

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""*Extract the data file in the pandas dataframe:-*"""

# Here we import the file from website to the variable URL
url = 'https://www.kaggle.com/datasets/uciml/sms-spam-collection-dataset'

# Download the data from Kaggle
!kaggle datasets download -d uciml/sms-spam-collection-dataset

# Unzip the downloaded file
!unzip sms-spam-collection-dataset.zip

# Load the data into a Pandas DataFrame, assuming the CSV is in the 'spam' subdirectory
df = pd.read_csv('spam.csv' , encoding='latin-1')  # Now Language didn't support so we you encoding as latin-1

#printing the 5 rows of the dataframe
print(df.head())

"""*Size of data frame:-*"""

# find the number of rows and columns
print(df.shape)

#print first 10 row
df.head(10)

"""*Pie chart of Spam vs Ham:-*"""

#Plot of pie chart of spam and ham email in dataframe
plt.pie(df['v1'].value_counts(), labels=['ham', 'spam'], autopct='%0.2f')
plt.title('Spam vs Ham')
plt.show()

"""*information of the datafram :-*"""

#Find the info of data frame like non null values , Dtype etc.
df.info()

"""###***We see that columns 3,4,5 was unnamed***

*Name the unnamed columns as v3,v4,v5:-*
"""

# name unnamed columns 1 as v3
df.rename(columns={'Unnamed: 2': 'v3'} , inplace=True)
# name unnamed columns 2 as v4
df.rename(columns={'Unnamed: 3': 'v4'} , inplace=True)
# name unnamed columns 3 as v5
df.rename(columns={'Unnamed: 4': 'v5'} , inplace=True)

"""*Check that name changed or not:-*"""

print("\n After Changing name of columns:- \n")
print(df.info)

"""*Plot a heatmap to see null values:-*"""

#Plot a heatmap to see columns with max null value
sns.heatmap(df.isnull() , cbar=False , cmap='viridis')
plt.title('Missing Values')

"""###***We see that columns v3,v4,v5 has maximum null values***

*Drop the columns with maximum null values:-*
"""

#removing columns v3,v4,v5 from datafame
df.drop(['v3', 'v4', 'v5'], axis=1, inplace=True)

"""*Set the value to differ spam and ham emails:-*"""

#Set the value to 1 if the email was spam
df.loc[df['v1'] == 'spam', 'v1'] = 1
#Set the value to 0 if the email is ham[imprtant email]
df.loc[df['v1'] == 'ham', 'v1'] = 0

"""*Traning the Model for future predication:-*"""

#Set the value of v2 in x
x = df['v2']
#set the values of v1 in y
y = df['v1']

"""*Seprating the datasets into traning dataset and test dataset :-*"""

#seprating the datasets into traning dataset and test dataset
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=3)

"""*Installing The TfidfVectorizer :-*"""

#Installing The TfidfVectorizer
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

"""*Get the train and Test Features for X:-*"""

#Get the x train features
x_train_features = feature_extraction.fit_transform(x_train)
#Get the x test features
x_test_features = feature_extraction.transform(x_test)

"""*Set the value of y train and test :-*"""

#Set the value as int for y train
y_train = y_train.astype('int')
#Set the value as int for y test
y_test = y_test.astype('int')

"""*Installing the Logistic Regression Model :-*"""

#*Installing the Logistic Regression Model
model = LogisticRegression()

"""*Training the Model :-*"""

#Training the model
model.fit(x_train_features, y_train)

"""*Making Prediction :-*"""

#Making Prediction
prediction = model.predict(x_test_features)

"""*Calculating the accuracy of Predication:-*"""

# Calculate accuracy score (ipython-input-92-557b9ac3dae8)
acc_score = accuracy_score(y_test, prediction)
print('Accuracy Score:', acc_score)

"""###***☝️☝️ Above we see the accuracy of prediction is around 97***

####***Predict the Spam and ham for user input***
"""

feature_extraction.fit(x_train)

# Now transform the user input
user_input = ['''	Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's''']
input_data = feature_extraction.transform(user_input)
prediction = model.predict(input_data)

#Here we use if else to Print Spam and Ham as result
if prediction[0] == 1:
    print('Spam')
else:
    print('Ham')

print(prediction)